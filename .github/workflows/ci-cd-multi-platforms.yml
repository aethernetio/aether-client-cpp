# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  #Allows you to start workflow manually from the actions tab in the interface github.com
  workflow_dispatch:

jobs:
  #CMake builds
  build:
    name: ${{ matrix.config.name }}/${{ matrix.platforms.name }}
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: ${{ matrix.config.shell }} {0}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        config:
          - {
              name: "Windows Latest MSVC",
              os: windows-latest,
              platform: "msvc64",
              shell: "powershell",
              generator: "Visual Studio 17 2022",
              cc: "cl",
              cxx: "cl",
              cxx_flags: "",
              cxx_standard: 17,
              build_type: Release,
              distillation: On,
            }
          - {
              name: "Windows Latest MinGW",
              os: windows-latest,
              platform: "mingw64_gcc",
              shell: "msys2",
              generator: "Ninja",
              cc: "gcc",
              cxx: "g++",
              cxx_flags: "",
              cxx_standard: 17,
              build_type: Release,
              distillation: On,
            }
          - {
              name: "Ubuntu Latest GCC",
              os: ubuntu-latest,
              platform: "linux_gcc",
              shell: "bash",
              generator: "Unix Makefiles",
              cc: "gcc",
              cxx: "g++",
              cxx_flags: "",
              cxx_standard: 17,
              build_type: Release,
              distillation: On,
            }
          - {
              name: "macOS Latest Clang",
              os: macos-latest,
              platform: "macos_clang",
              shell: "bash",
              generator: "Unix Makefiles",
              cc: "clang",
              cxx: "clang++",
              cxx_flags: "",
              cxx_standard: 17,
              build_type: Release,
              distillation: On,
            }

        platforms:
          - {
              name: "Hydrogen",
              user_config: "./config/user_config_hydrogen.h",
              fs_init: "./config/file_system_init.h",
            }
          - {
              name: "Sodium",
              user_config: "./config/user_config_sodium.h",
              fs_init: "./config/file_system_init.h",
            }

    steps:
      - name: Set Windows enviroment
        if: ${{ (matrix.config.platform == 'msvc64') }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set MinGW enviroment
        if: ${{ (matrix.config.platform == 'mingw64_gcc') }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            git
            base-devel
          pacboy: >-
            cmake:p
            ninja:p
            gcc:p
          update: true

      - name: Set Ubuntu environment
        if: ${{ (runner.os == 'Linux') }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libx11-dev
          version: 1.0

      - uses: actions/checkout@v4
        with:
          submodules: recursive

        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      - name: Configure CMake
        run: >
          cmake -B build
          -G "${{ matrix.config.generator }}"
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }}
          -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
          -DAE_DISTILLATION=${{ matrix.config.distillation }}
          -DUSER_CONFIG="${{ matrix.platforms.user_config }}"
          -DFS_INIT="${{ matrix.platforms.fs_init }}"
          -S projects/cmake

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build build --config ${{ matrix.config.build_type }} --parallel

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Aether_${{ matrix.config.name }}_${{ matrix.platforms.name }}
          path: "build/*"
          include-hidden-files: true
          overwrite: true

      - name: Test
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --test-dir build --build-config ${{ matrix.config.build_type }} --output-on-failure

  #ESP32 Build
  build-esp-idf-component:
    name: ESP-IDF ${{ matrix.idf_ver }} for ${{ matrix.idf_target }} ${{ matrix.compile_example }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # The version names here correspond to the versions of espressif/idf Docker image.
        # See https://hub.docker.com/r/espressif/idf/tags and
        # https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/tools/idf-docker-image.html
        # for details.
        idf_ver: ["release-v5.5"]
        idf_target: ["esp32"]
        compile_example: ["cloud"]
        platforms:
          - {
              name: "Optimized",
              user_config: "./config/user_config_optimized.h",
              fs_init: "./config/file_system_init.h",
            }

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Build Application
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.idf_ver }}
          target: ${{ matrix.idf_target }}
          path: "projects/xtensa_lx6/vscode/aether-client-cpp"
          command: idf.py build
            -DCOMPILE_EXAMPLE=${{ matrix.compile_example }}
            -DUSER_CONFIG=../../../../../${{ matrix.platforms.user_config }}
            -DFS_INIT="../../../../../${{ matrix.platforms.fs_init }}"
            -DAE_DISTILLATION=Off

      - name: Rename artifact
        run: |
          ls -lah
          cp projects/xtensa_lx6/vscode/aether-client-cpp/build/bootloader/bootloader.bin bootloader-${{ matrix.idf_ver }}.bin
          cp projects/xtensa_lx6/vscode/aether-client-cpp/build/partition_table/partition-table.bin partition-table-${{ matrix.idf_ver }}.bin
          cp projects/xtensa_lx6/vscode/aether-client-cpp/build/Aether.bin Aether-${{ matrix.compile_example }}-${{ matrix.idf_ver }}.bin

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Aether_${{ matrix.idf_target }}_${{ matrix.idf_ver }}_${{ matrix.compile_example }}
          path: "*-${{ matrix.compile_example }}-${{ matrix.idf_ver }}.bin"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Firmware Files
        uses: actions/download-artifact@v4
        with:
          path: build
