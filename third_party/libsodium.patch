diff --git a/src/libsodium/include/sodium/private/common.h b/src/libsodium/include/sodium/private/common.h
index 4b01c8a0..83fb3bac 100644
--- a/src/libsodium/include/sodium/private/common.h
+++ b/src/libsodium/include/sodium/private/common.h
@@ -1,6 +1,11 @@
 #ifndef common_H
 #define common_H 1
 
+#define DEV_MODE 1
+#define CONFIGURED 1
+//#define _MSC_VER 1
+
+
 #if !defined(_MSC_VER) && !defined(DEV_MODE) && 1
 # warning *** This is unstable, untested, development code.
 # warning It might not compile. It might not work as expected.

diff --git a/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c b/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c
index 325f9bab..ee5b2d9e 100644
--- a/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c
+++ b/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c
@@ -46,6 +46,10 @@
 # include <poll.h>
 #endif
 
+#if defined(ESP_PLATFORM)
+#include <esp_random.h>
+#endif
+
 #include "core.h"
 #include "private/common.h"
 #include "randombytes.h"
@@ -277,11 +281,12 @@ randombytes_sysrandom_init(void)
         stream.getrandom_available = 0;
     }
 #  endif
-
+#if !defined(ESP_PLATFORM)
     if ((stream.random_data_source_fd =
          randombytes_sysrandom_random_dev_open()) == -1) {
         sodium_misuse(); /* LCOV_EXCL_LINE */
     }
+#endif
     errno = errno_save;
 }
 
@@ -355,10 +360,14 @@ randombytes_sysrandom_buf(void * const buf, const size_t size)
         return;
     }
 #  endif
+#if defined(ESP_PLATFORM)
+    esp_fill_random(buf, size);
+#else
     if (stream.random_data_source_fd == -1 ||
         safe_read(stream.random_data_source_fd, buf, size) != (ssize_t) size) {
         sodium_misuse(); /* LCOV_EXCL_LINE */
     }
+#endif
 # else /* _WIN32 */
     COMPILER_ASSERT(randombytes_BYTES_MAX <= 0xffffffffUL);
     if (size > (size_t) 0xffffffffUL) {
@@ -368,6 +377,7 @@ randombytes_sysrandom_buf(void * const buf, const size_t size)
         sodium_misuse(); /* LCOV_EXCL_LINE */
     }
 # endif /* _WIN32 */
+
 }
 
 static uint32_t
