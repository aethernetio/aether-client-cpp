cmake_minimum_required(VERSION 3.16.0)

list(APPEND libbcryp_srcs
            bcrypt.c)

list(APPEND crypt_blowfish_srcs
            crypt_blowfish/crypt_blowfish.c
            crypt_blowfish/crypt_gensalt.c
            crypt_blowfish/wrapper.c)

if(NOT CM_PLATFORM)

    project(bcrypt VERSION 1.0.0 LANGUAGES CXX)

    add_library(${PROJECT_NAME} STATIC ${libbcryp_srcs}
                            ${crypt_blowfish_srcs})

    if (CMAKE_SYSTEM_NAME MATCHES ".*BSD.*" )
        target_compile_definitions(${PROJECT_NAME} PRIVATE "__SKIP_GNU")
    endif()

else()
    idf_build_get_property(CM_PLATFORM CM_PLATFORM)
    if(CM_PLATFORM STREQUAL "ESP32")
        #ESP32 CMake
        set(include_dirs "../../"
                        "crypt_blowfish")
                    
        idf_component_register(SRCS
                            ${libbcryp_srcs}
                            ${crypt_blowfish_srcs}
                            INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
                            INCLUDE_DIRS ${include_dirs}
                            REQUIRES unity)
    else()
        #ERROR
        message(SEND_ERROR "You must specify the CMAKE version!")
    endif()
endif()

if(NOT CM_PLATFORM)
    set_target_properties(${PROJECT_NAME}
        PROPERTIES 
            C_STANDARD          17
            C_STANDARD_REQUIRED ON
            PUBLIC_HEADER       "${${PROJECT_NAME}_PUBLIC_HEADERS}"
            EXPORT_NAME         framework
    )

    target_compile_options(${PROJECT_NAME}
        PRIVATE
            # Clang
            $<$<C_COMPILER_ID:Clang>:
            >
            
            # GCC
            $<$<C_COMPILER_ID:GNU>:
                -Wno-cpp
            >

            # MSVC
            $<$<C_COMPILER_ID:MSVC>:
            >
    )

    ## Target installation
    install(TARGETS   ${PROJECT_NAME}
        EXPORT        ${PROJECT_NAME}Targets
        ARCHIVE       DESTINATION ${CMAKE_INSTALL_LIBDIR}
        LIBRARY       DESTINATION ${CMAKE_INSTALL_LIBDIR}
        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
        COMPONENT     library
    )

    ## Target's cmake files: targets export
    install(EXPORT  ${PROJECT_NAME}Targets
        NAMESPACE   ${PROJECT_NAME}::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
    )

    ## Target's cmake files: config and version config for find_package()
    install(FILES   ${PROJECT_NAME}Config.cmake
                    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
    )

endif()
