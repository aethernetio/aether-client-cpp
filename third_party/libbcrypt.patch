diff --git a/bcrypt.c b/bcrypt.c
index bd8722b..ac051c5 100644
--- a/bcrypt.c
+++ b/bcrypt.c
@@ -14,15 +14,32 @@
 #include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#if (defined(__linux__) || defined(__unix__) || defined(__APPLE__) || defined(__FreeBSD__))
 #include <fcntl.h>
 #include <unistd.h>
 #include <errno.h>
+#endif
+
+#if (defined(CONFIG_IDF_TARGET_ESP32) || \
+     defined(ESP8266) || \
+     defined(CONFIG_IDF_TARGET_ESP32S2) || \
+     defined(CONFIG_IDF_TARGET_ESP32S3) || \
+     defined(CONFIG_IDF_TARGET_ESP32C2) || \
+     defined(CONFIG_IDF_TARGET_ESP32C3) || \
+     defined(CONFIG_IDF_TARGET_ESP32C5) || \
+     defined(CONFIG_IDF_TARGET_ESP32C6) || \
+     defined(CONFIG_IDF_TARGET_ESP32H2) || \
+     defined(CONFIG_IDF_TARGET_ESP32P4))
+#include <esp_random.h>
+#endif
 
 #include "bcrypt.h"
 #include "crypt_blowfish/ow-crypt.h"
+#include "crypt_blowfish/crypt_gensalt.h"
 
 #define RANDBYTES (16)
 
+#if (defined(__linux__) || defined(__unix__) || defined(__APPLE__) || defined(__FreeBSD__))
 static int try_close(int fd)
 {
 	int ret;
@@ -60,6 +77,7 @@ static int try_read(int fd, char *out, size_t count)
 
 	return 0;
 }
+#endif
 
 /*
  * This is a best effort implementation. Nothing prevents a compiler from
@@ -96,11 +114,12 @@ static int timing_safe_strcmp(const char *str1, const char *str2)
 
 int bcrypt_gensalt(int factor, char salt[BCRYPT_HASHSIZE])
 {
-	int fd;
 	char input[RANDBYTES];
 	int workf;
 	char *aux;
 
+#if (defined(__linux__) || defined(__unix__) || defined(__APPLE__) || defined(__FreeBSD__))
+	int fd;
 	fd = open("/dev/urandom", O_RDONLY);
 	if (fd == -1)
 		return 1;
@@ -114,6 +133,19 @@ int bcrypt_gensalt(int factor, char salt[BCRYPT_HASHSIZE])
 	if (try_close(fd) != 0)
 		return 3;
 
+#elif (defined(CONFIG_IDF_TARGET_ESP32) || \
+       defined(ESP8266) || \
+       defined(CONFIG_IDF_TARGET_ESP32S2) || \
+       defined(CONFIG_IDF_TARGET_ESP32S3) || \
+       defined(CONFIG_IDF_TARGET_ESP32C2) || \
+       defined(CONFIG_IDF_TARGET_ESP32C3) || \
+       defined(CONFIG_IDF_TARGET_ESP32C5) || \
+       defined(CONFIG_IDF_TARGET_ESP32C6) || \
+       defined(CONFIG_IDF_TARGET_ESP32H2) || \
+       defined(CONFIG_IDF_TARGET_ESP32P4))
+	esp_fill_random(input, RANDBYTES);
+#endif
+
 	/* Generate salt. */
 	workf = (factor < 4 || factor > 31)?12:factor;
 	aux = crypt_gensalt_rn("$2a$", workf, input, RANDBYTES,
